Step -1,


First of all We have to install express-mongoose-typescript-dotenv-cors and make sure to install typescript as a Devdependency and mongodb

* Then We have to initialize an Ts Config file by typing tsc --init and set up the root dir and out dir. after that we have to create that specific folder structure like this 

		On the root 
			src > 1.app.ts => And We have to run basic express server code on it for testing
			      2.server.ts		


*2* Then  we have to move (The main server file) to the server.ts file and configure mongoose with it 
    we have to keep in mind that we must use those DB credentials into the Env file and To use ENV file across the whole project we have to crete another config file for Env. here is the steps 
    1.Create a new folder name Config inside the app Folder and have to create an index.ts file which will connect the Env to the Current working dir file so that we can export those Env from that file and use them wherever we want: 

    code base => 

        import dotenv from "dotenv";
        import path from "path";

        dotenv.config({ path: path.join((process.cwd(), ".env")) }); // => this is used to connect current working dir to the ENV file.

        export default {
        port: process.env.PORT,
        dataBaseUrl: process.env.DATABASE_URL,
            };

(*2 Impotent* We must write Server.ts code into Try catch Statement to avoid server crash on error)


*3* Then we have to use parser into the app.ts file like json parser and cros parser and we have to define type for each variables from express and After that We have to Install Eslint and Prettier and Configure them
** After That We have to install TS Node Dev for running ts file directly without compiling



************************Software Design pattern********************


***********WE ARE GOING TO USE ( Modular ) PATTERN***********************


********For JS********

If we use JS with mongoose then we have to follow this patterns =>

=>>>  schema > module > DB Query 


And If we use TS with mongoose then we have to add Interface before schema and keep them all like Js patters, So the Patter will be look like this =>>>>

=>> interface > schema > module > DB Query 



**************************pattern End********************

So as we discussed we are gonna use Modular pattern here is the step
    1. create a folder name modules inside the app folder. After that crete another folder inside the modules folder and the name will be your categories name For Example ProductModel . 
    2. inside this created folder we have to write our all needed code for only this selected category
    3. Now we are gonna follow that interface > schema > module > DB Query  patterns so we have to create interface like this product.interface.ts like this we gonna create our need file
    4. Inside the interface file we are gonna create all the interface or type for our uses and Must be export those types or interfaces to use in other files 
    5.After creating interfaces we will create model/ schema. For this we are gonna create another file name product.model.ts and have to create  schema using those created types and on the last section of the page we have to create a model and export it.



*************************************Request Response  Flow Of Modular Pattern**************************************


    client ---(Req)----> route.ts ----(Req)---> controller.ts ---(Req)---> <---(Res)--- service.ts ---(Req)--- >< ---(Res)--- DB
    
************************************************************************************************************


**Now we have to handle Route for this we have to create a route file name product.route.ts 

** After this we have to create product.controller.ts 
*** after that product.service.ts 

and lastly we have to connect these with the main app.ts file















